{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","sound","name","playing","activate","bind","assertThisInitialized","_this2","document","getElementById","pause","currentTime","setState","volume","play","setTimeout","duration","react_default","a","createElement","className","id","onMouseUp","style","backgroundColor","src","React","Component","Board","_this3","all_sounds","route","_this4","fetch","then","response","json","responseJson","catch","error","console","_this5","_this$state","class","uk-toggle","href","uk-navbar-toggle-icon","uk-offcanvas","map","soundItem","onClick","uk-grid","sounds","App_Note","url","key","title","App","App_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce2f051c.chunk.js","sourcesContent":["import React from 'react';\n\nclass Note extends React.Component{\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      color: props.color,\n      sound: props.sound,\n      name: props.name,\n      playing: false\n    }\n\n    this.activate = this.activate.bind(this)\n  }\n\n  activate() {\n\n    let sound = document.getElementById(this.state.name + \"Sound\")\n\n    if(this.state.playing == true){\n      sound.pause();\n      sound.currentTime = 0;\n      this.setState({playing: false})\n    }else{\n      sound.volume = 0.3\n      sound.play()\n      this.setState({playing: true})\n      setTimeout(() => {this.setState({playing: false})}, sound.duration * 1000)\n    }\n  }\n\n  render() {\n    \n    return(\n      <div className='note' id={this.state.name} onMouseUp={this.activate}>\n        {/* {this.state.name} */}\n        <div className=\"uk-card uk-card-default uk-card-body\" style={{backgroundColor: this.state.color}}><p style={{color: 'white'}}>{this.state.name}</p></div>\n        <audio className=\"noteAudio\" id={this.state.name + \"Sound\"}>\n          <source src={this.state.sound}/>\n        </audio>\n      </div>\n    )\n  }\n}\n\n//create board class\nclass Board extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      all_sounds: [],\n      route: 'base',\n    }\n    \n  }\n\n  componentDidMount() {\n    return fetch('https://aituglo.com/api/soundBox.json')\n    .then((response) => response.json())\n    .then((responseJson) => {\n\n      this.setState({all_sounds: responseJson})\n      \n    })\n    .catch((error) => {\n      console.error('Error' + error);\n    });\n  }\n\n\n  render() {\n    const {route, all_sounds } = this.state;\n    return (\n      <div>\n      <nav class=\"uk-navbar uk-navbar-container uk-margin\">\n          <div class=\"uk-navbar-left\">\n              <a class=\"uk-navbar-toggle\" uk-toggle=\"target: #offcanvas-nav\" href=\"#\">\n                  <span uk-navbar-toggle-icon></span> <span class=\"uk-margin-small-left\">Menu</span>\n              </a>\n              <a class=\"uk-navbar\" href=\"static/Aitubox.apk\">\n                  <span class=\"uk-margin-small-left\">APK</span>\n              </a>\n          </div>\n      </nav>\n      <div id=\"offcanvas-nav\" uk-offcanvas=\"mode: push\">\n        <div className=\"uk-offcanvas-bar\">\n          <ul className=\"uk-nav uk-nav-default\">\n            {all_sounds.map(soundItem => {\n              return (\n                <li className=\"uk-nav-header\">\n                  <a href=\"#\" onClick={() => this.setState({route: soundItem.route})}>{soundItem.name}</a>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      </div>\n      <div className=\"uk-container uk-padding\">\n        <h1 className=\"uk-heading-line uk-text-center\"><span>Aitubox</span></h1>\n        <div className=\"uk-grid-column-small uk-grid-row-large uk-child-width-1-5@s uk-text-center\" uk-grid=\"true\">\n        {all_sounds.map(soundItem => {\n          if (soundItem.route === route){\n            return soundItem.sounds.map(sound => {\n              return (\n                <Note sound={sound.url} key={sound.id} name={sound.title} color={sound.color} />\n              )\n            })\n          }\n        })}\n      </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <Board />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render( \n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}